# -*- coding: utf-8 -*-
"""Parkinson's Disease Detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nba9J4LpMIhzwRskJ79MKBqyCpA3c2_t
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn import svm
from sklearn.metrics import accuracy_score

parkinsons_data=pd.read_csv('/content/parkinsons.csv')

parkinsons_data.head()

parkinsons_data.shape

parkinsons_data.isnull().sum()

parkinsons_data.describe()

parkinsons_data['status'].value_counts()

"""

*   1  --->Parkinsons Positive
*   0  --->Parkinsons Negative



"""

X=parkinsons_data.drop(columns=['name','status'],axis=1)
Y=parkinsons_data['status']

print(X)

print(Y)

"""SPLITTING DATA TO TRAINING DATA AND TEST DATA"""

X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.2,random_state=2)

print(X.shape,X_train.shape,X_test.shape)

scaler = StandardScaler()

scaler.fit(X_train)

X_train=scaler.transform(X_train)
X_test=scaler.transform(X_test)

print(X_train)

model=svm.SVC(kernel='linear')

model.fit(X_train, Y_train)

"""MODEL EVALUATIION AND ACCURACY SCORE"""

X_train_prediction=model.predict(X_train)
training_data_accuracy=accuracy_score(Y_train,X_train_prediction)

print('Accuracy score of the trainig data: ',training_data_accuracy)

#accuracy score on the testing data
X_test_prediction=model.predict(X_test)
test_data_accuracy=accuracy_score(Y_test,X_test_prediction)

print('Accuracy score of the trainig data: ',test_data_accuracy)

"""BUILLDING A PREDECTIVE SYSTEM

"""

input_data=(139.17300,179.13900,76.55600,0.00390,0.00003,0.00165,0.00208,0.00496,0.01642,0.15400,0.00728,0.00932,0.01797,0.02184,0.01041,24.88900,0.430166,0.665833,-5.660217,0.254989,2.519422,0.199889
)


input_data_as_numpy_array = np.asarray(input_data)


input_data_reshaped= input_data_as_numpy_array.reshape(1,-1)


std_data=scaler.transform(input_data_reshaped)
# print(std_data)


prediction= model.predict(std_data)
print(prediction)


if (prediction[0]==0):
  print('The person does not have Parkinsons')
else:
  print('The person has Parkinsons')

import pickle

filename = 'parkinsons_model.sav'
pickle.dump(model, open(filename, 'wb'))

# loading the saved model
loaded_model = pickle.load(open('parkinsons_model.sav', 'rb'))

for column in X.columns:
  print(column)